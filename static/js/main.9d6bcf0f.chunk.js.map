{"version":3,"sources":["components/landingpage.js","components/projects.js","components/resume.js","components/photography.js","components/contact.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","Component","Projects","class","Resume","Photography","Contact","Main","exact","path","component","App","className","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAiBeA,E,iLAbP,OACI,6BACI,4CACA,0CAAe,6CAAf,0EACA,0CAEA,gM,GARUC,aC8BXC,E,iLA5BP,OACI,6BACE,6BAASC,MAAM,YACb,yCAEA,yBAAKA,MAAM,OACT,yBAAKA,MAAM,0BACT,4CACA,sbAMF,yBAAKA,MAAM,0BACT,0CACA,oKAEF,yBAAKA,MAAM,0BACT,uCACA,+J,GAtBGF,aCkBRG,E,iLAhBP,OACI,6BAAK,2CACL,4BACI,gEAAqC,6CACrC,gDAAqB,6CACrB,oFACA,uEACA,2EACA,sDACA,wE,GAXKH,aCQNI,E,iLANP,OACI,6BAAK,qD,GAHSJ,aCQXK,E,iLANP,OACI,6BAAK,iD,GAHKL,aCkBPM,EAVF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAAK,UAAUC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWL,IAChC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,M,OCqB3BK,MA7Bf,WACE,OACA,yBAAKC,UAAU,oBACX,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQC,MAAM,sCAAsCC,QAAM,GACtD,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,eACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,SAAD,CAAQF,MAAM,SACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAME,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,eACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,UAAD,KACI,yBAAKH,UAAU,iBACf,kBAAC,EAAD,UClBMI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACC,kBAAC,EAAD,OAECC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9d6bcf0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Landing Page</h1>\n                <h1>Hello, I'm <b>Cynthia&nbsp;Hsu</b>! I study Electrical Engineering \\& Computer Science @ UC&nbsp;Berkeley</h1>\n                <h2>Background</h2>\n         \n                <p>Originally from Southern California, I moved to the bay area to study at UC Berkeley.\n                    I'm majoring in EECS, and I expect to graduate in the Spring of 2020. </p>\n            </div>\n        );\n    } \n}\n\nexport default LandingPage;\n","import React, { Component } from 'react';\n\nclass Projects extends Component {\n    render() {\n        return (\n            <div>\n              <section class=\"col-xs-4\">\n                <h2>Projects</h2>\n              </section>\n                <div class=\"row\">\n                  <div class=\"card col-sm-6 col-md-4\">\n                    <h3>Auto-Billing</h3>\n                    <p>For my summer internship, I took responsibility over designing and implementing a\n                      feature to the main customer portal that would allow clients to be automatically billed\n                      for any charges that occured during the prior day. I used React.JS primarily to implement\n                      the frontend and also used JavaScript with Stripe API to implement the backend. This\n                      addition went-live and yields over $3,000 of revenue monthly.</p>\n                  </div>\n                  <div class=\"card col-sm-6 col-md-4\">\n                    <h3>CPU Design</h3>\n                    <p>I designed a 2-cycle pipelined processor using Logisim, a visual RTL, that successfully implemented the core RISC-V instruction set.</p>\n                  </div>\n                  <div class=\"card col-sm-6 col-md-4\">\n                    <h3>Git-let</h3>\n                    <p>I created a miniaturized version-control system using several Java classes to represent and serialize files and commits. </p>\n                  </div>\n                </div>\n            </div>\n        );\n    } \n}\n\nexport default Projects;\n","import React, { Component } from 'react';\n\nclass Resume extends Component {\n    render() {\n        return (\n            <div><h1>Resume Page</h1>\n            <ul>\n                <li>CS189: Intro to Machine Learning <i>(in progress)</i></li>\n                <li>CS186: Databases <i>(in progress)</i></li>\n                <li>CS170: Designing Algorithms and Intractable Problems</li>\n                <li>CS188: Intro to Artificial Intelligence</li>\n                <li>CS61C: Great Ideas in Computer Architecture</li>\n                <li>CS61B: Data Structures</li>\n                <li>CS61A: Fundamentals of Programming</li>\n            </ul>\n            </div>\n        );\n    } \n}\n\nexport default Resume;\n","import React, { Component } from 'react';\n\nclass Photography extends Component {\n    render() {\n        return (\n            <div><h1>Photography Page</h1></div> \n        );\n    } \n}\n\nexport default Photography;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n    render() {\n        return (\n            <div><h1>Contact Page</h1></div> \n        );\n    } \n}\n\nexport default Contact;\n","\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport LandingPage from './landingpage';\nimport Projects from './projects';\nimport Resume from './resume';\nimport Photography from './photography';\nimport Contact from './contact';\n\nconst Main = () => (\n    <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route path=\"/projects\" component={Projects} />\n        <Route path=\"/resume\" component={Resume} />\n        <Route path=\"/photo\" component={Photography} />\n        <Route path=\"/contact\" component={Contact} />\n    </Switch>\n)\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { Layout, Header, Navigation, Drawer, Content, HeaderRow, HeaderTabs, Tab } from 'react-mdl';\nimport Main from './components/main.js';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n  <div className=\"demo-big-content\">\n      <Layout>\n          <Header title=\"*this site is in active development\" scroll>\n              <Navigation>\n                  <Link to=\"/resume\">Resume</Link>\n                  <Link to=\"/projects\">Projects</Link>\n                  <Link to=\"/photo\">Photography</Link>\n                  <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n          </Header>\n          <Drawer title=\"Title\">\n              <Navigation>\n                  <Link to=\"/resume\">Resume</Link>\n                  <Link to=\"/projects\">Projects</Link>\n                  <Link to=\"/photo\">Photography</Link>\n                  <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n          </Drawer>\n          <Content>\n              <div className=\"page-content\" />\n              <Main />\n          </Content>\n      </Layout>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n     <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}